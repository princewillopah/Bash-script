#!/bin/bash
echo



### ==========================================================================================================================================================
### Basic Function Definition and Call
### ==========================================================================================================================================================

# greet() {
#     echo "Hello, World!"
# }
# # Call the function
# greet

# -----------------------------------------------------
# Define a function to display system information
# -----------------------------------------------------


# system_info() {
#     echo "=== System Information ==="
#     echo "Hostname: $(hostname)"
#     echo "Kernel: $(uname -r)"
#     echo "Uptime: $(uptime -p)"
#     echo "Date: $(date +'%Y-%m-%d')"
#     echo "Time: $(date +'%H:%M:%S')"
#     echo "User: $(whoami)"
#     echo "Directory: $(pwd)"
#     echo "Shell: $SHELL"
#     echo "Environment Variables:"  
#     printenv
#     echo "Disk Usage:"
#     df -h
#     echo "Memory Usage:"
#     free -h
#     echo "Network Configuration:"
#     ifconfig
#     echo "Running Processes:"
#     ps aux
#     echo "System Load:"
#     uptime
#     echo "System Time:"
#     date +'%H:%M:%S'
#     echo "System Date:"
#     echo "$(date +'%Y-%m-%d')"
#     echo "System Uptime:"
#     echo "$(uptime -p)"
# }

# # Call the function
# system_info


#   echo ${env:-"default_env"}   # If env is unset, use default_env
#     echo ${env:="set_dev"}       # If env is unset, set it to set_dev
# -----------------------------------------------------
# Task: say hello
# -----------------------------------------------------
# greet() {
#     echo "Hello, $@"
#     echo "Hello, $1"
#        echo "Hello, $2"

#     local str="$1"
#     local reversed_str=""
#     local length=${#str}

#     for (( i=$length-1; i>=0; i-- )); do
#         reversed_str+="${str:i:1}"
#     done

#     echo "Your name can be reversed as" "$reversed_str"
#     echo
# }




# greet
# greet "John"
# greet "Bob"
# greet "Alice" "John"



## -----------------------------------------------------
## Task: Create a function that displays the current weather (using curl and a weather API):
## -----------------------------------------------------
               
# get_weather() {
#     local city=${1:-New York}
#     curl -s "wttr.in/$city?format=3"
# }

# # Call it
# get_weather Chicago
# get_weather "Los Angeles"
# get_weather "San Francisco"
# get_weather "London"
# get_weather "Tokyo"
# get_weather "Paris"
# get_weather "Berlin"
# get_weather "Lagos"
# get_weather  # Uses default





### ==========================================================================================================================================================
### Passing Arguments to Functions
### ==========================================================================================================================================================

# greet() {
#     local name=${1:-"Anonymous"}
#     local greeting=${2:-"Hello"}
#     echo "$greeting, $name!"
# }
# # note - first arguement is name, second is greeting
# # calling greet function
# greet Alice
# greet Bob "Good morning"
# greet "Charlie" "Welcome"
# greet  # Uses default values

# -----------------------------------------------------
# Task: Create a function that takes two numbers and returns their sum:
# -----------------------------------------------------
# function add(){
#     echo "The sum of $1 and $2 is: $(($1 + $2))"
# }

# # calling add function
# add 5 10
# add 20 30




# -----------------------------------------------------
# Task: Create a function that takes two numbers and returns their sum:
# -----------------------------------------------------
# add() {
#     # local num1=$1
#     # local num2=$2
#     # local sum=$((num1 + num2))
#     # echo "The sum of $num1 and $num2 is: $sum"

#     echo "The sum of $1 and $2 is: $(($1 + $2))"
# }

# add 5 10
# add 20 30
# add 100 200

# # -----------------------------------------------------
## validate number
# # -----------------------------------------------------


# validate_number() {
#     if [[ "$1" =~ ^[0-9]+$ ]]; then
#         return 0
#     else
#         return 1
#     fi
# }

# # Test the function
# read -p "Enter your number: " num
# validate_number $num && echo "$num is a valid number" || echo "$num is an invalid number"

# if validate_number $num; then
#     echo "$num is a valid number"
# else
#     echo "$num is an invalid number"
# fi



# # -----------------------------------------------------
# Multiple arguments
# # -----------------------------------------------------
# show_args() {
#   for arg in "$@"; do
#     echo $arg
#   done
# }

# show_args "one" "two" "three"
# show_args "one" "two" "three" "four" "five"
# show_args "one" "two" "three" "four" "five" "six" "seven" "eight" "nine" "ten"
# -----------------------------------------------------
# Task: Create a function that takes a name as an argument and displays a greeting message:
# -----------------------------------------------------

# function display_info(){
#     local name=$1   # e.g "princewill"
#     # local name=${name,,} # convert to lowercase
#     # local name=${name^} # convert to uppercase
#     # local name=${name^^} # convert to uppercase
#     # local name=${name,,} # convert to lowercase
#     echo "You are wellcome, $name"
#     echo "The length of $name is: ${#name}"

#     echo "The first letter of $name in lowercase is: ${name,}"   # "princewill"
#     echo "The first letter of $name in uppercase is: ${name^}"   # "Princewill"
#     echo "The first letter of $name in uppercase is: ${name^^}"  # "PRINCEWILL"
#     echo "The first letter of $name in lowercase is: ${name,,}"  # "princewill"
#     echo "The first letter of '$name' is: ${name:0:1} and the last character is: ${name: -1}"
#     echo "The first 3 characters of $name are: ${name:0:3}"
#     echo "The last 3 characters of $name are: ${name: -3}"
   
# }
# read -p "Enter your name: " name

# display_info "$name"


# -----------------------------------------------------
# Task: Create a function that takes a string and returns it in uppercase:
# -----------------------------------------------------
# to_uppercase() {
#     local str=$1
#     local upper_str=$(echo "$str" | tr '[:lower:]' '[:upper:]')
#     echo "The uppercase version of '$str' is: $upper_str"
# }
# to_uppercase "hello"
# to_uppercase "bash scripting"
# to_uppercase "function example"
# -----------------------------------------------------
# Task: Create a function that takes a string and returns it in lowercase:
# -----------------------------------------------------
# to_lowercase() {
#     local str=$1
#     local lower_str=$(echo "$str" | tr '[:upper:]' '[:lower:]')
#     echo "The lowercase version of '$str' is: $lower_str"
# }
# to_lowercase "HELLO"
# to_lowercase "BASH SCRIPTING"
# to_lowercase "FUNCTION EXAMPLE"
# -----------------------------------------------------
# Task: Create a function that takes a string and returns it with the first letter capitalized:
# -----------------------------------------------------
# capitalize() {
#     local str=$1
#     local capitalized_str=$(echo "$str" | awk '{print toupper(substr($0,1,1)) substr($0,2)}')
#     echo "The capitalized version of '$str' is: $capitalized_str"
# }
# capitalize "hello"
# capitalize "bash scripting"
# capitalize "function example"



## -----------------------------------------------------
## 
## -----------------------------------------------------


### ==========================================================================================================================================================
### Returning Values from Function
### ==========================================================================================================================================================
# file_contains() {
#     local file=$1
#     local word=$2
    
#     [ -f "$file" ] || return 2
#     grep -q "$word" "$file" && return 0 || return 1
# }

# # Test it
# file_contains /etc/passwd root
# case $? in
#     0) echo "Found" ;;
#     1) echo "Not found" ;;
#     2) echo "File missing" ;;
# esac

## -----------------------------------------------------
## Using return (for exit status)
## -----------------------------------------------------

# is_even(){
#  if [ $(($1 % 2)) -eq 0 ]; then
#     return 0	# Success/true in shell terms
#   else
# 	return 1	  # Failure/false in shell terms
#  fi
# }

# # usage
# read -p "Enter number: " num

# is_even $num && echo "$num is even" || echo "$num is odd"

# OR 

# if is_even $num; then
#   echo "$num is even"
# else
#   echo "$num is odd"
# fi

# 
## -----------------------------------------------------
## Returning a Value with echo
## -----------------------------------------------------


# get_square() {
#     local num=$1
#     local square=$((num * num))
#     echo $square
# }
# # Call the function and capture the output
# read -p "Enter a number: " num
# result=$(get_square $num)
# echo "The square of $num is: $result"

# # OR
# result=`get_square $num`
# echo "The square of $num is: $result"

# -----------------------------------------------------
# Task: Create a function that takes a string and returns its length:


### ==========================================================================================================================================================
### Variable Scope
### ==========================================================================================================================================================

# Variable Scope

# scope_demo() {
#     global_var="I'm global"
#     local local_var="I'm local"
#     echo "Inside function: $global_var, $local_var"
# }

# scope_demo
# echo "Outside function: $global_var"
# echo "Outside function: $local_var"  # Will be empty


### ==========================================================================================================================================================
###  Recursive Functions
### ==========================================================================================================================================================

# factorial() {
#     local num=$1

#     if [ $num -le 1 ]; then
#         echo 1
#     else
#         echo $(( num * $(factorial $((num - 1))) ))
#     fi
# }

# result=$(factorial 5)
# echo "Factorial of 5 is: $result"



### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### Task: Create a function that takes a directory as an argument and returns the total size of all files in it:
### ==========================================================================================================================================================
## explaination
# The function dir_size takes a directory as an argument and calculates its size recursively.
# It initializes a variable size to 0, then iterates over each item in the directory.
# If the item is a directory, it calls dir_size recursively to get its size and adds it to size.
# If the item is a file, it uses stat to get its size and adds it to size.
# Finally, it echoes the total size in bytes.



# dir_size() { 
#     local dir=$1
#     local size=0
#     for item in "$dir"/*; do
#         if [ -d "$item" ]; then
#             size=$((size + $(dir_size "$item")))
#         elif [ -f "$item" ]; then
#             size=$((size + $(stat -c %s "$item" 2>/dev/null || echo 0)))
#         fi
#     done
#     echo $size
# }
# size=$(dir_size ".")
# echo "Total size: $size bytes"


# - The for loop iterates over the contents of the input directory ("$dir"/*).
# - The * wildcard matches all files and subdirectories in the directory
# - The dir_size function takes one argument, $1, which is the directory to calculate the size for.
# - The local keyword declares two local variables: dir (the input directory) and size (initialized to 0


# - For each item, the script checks:
#     - If the item is a subdirectory ([ -d "$item" ]):
#         - Recursively calls the dir_size function on the subdirectory.
#         - Adds the result to the size variable.
#     - If the item is a file ([ -f "$item" ]):
#         - Uses stat to get the file size in bytes (-c %s option).
#         - Adds the file size to the size variable.
#         - If stat fails (e.g., due to permissions issues), the script uses echo 0 to default to a size of 0.

# Main Script
# size=$(dir_size ".")
# echo "Total size: $size bytes"


# - The main script calls the dir_size function with the current directory (.) as the input.
# - The result is stored in the size variable.
# - Finally, the script prints the total size in bytes.


# - Finally, the function echoes the total size in bytes.
# - The script then calls the dir_size function with the current directory (".") and stores the result in the size variable.
# - Finally, it prints the total size in bytes.
# - The script uses 2>/dev/null to suppress error messages from stat if it fails to access a file or directory.
# - The script uses echo to print the total size in bytes.
# - The script uses the stat command to get the size of files, which is more efficient than using ls or du.
# - The script uses the local keyword to declare local variables, which helps avoid variable name conflicts.
# - The script uses the $() syntax to capture the output of the dir_size function and store it in the size variable.
# - The script uses the || operator to handle errors gracefully, defaulting to a size of 0 if stat fails.
# - The script uses the -f option with the test command to check if an item is a file.
# - The script uses the -d option with the test command to check if an item is a directory.
# - The script uses the -c option with the stat command to get the size of a file in bytes.
# - The script uses the %s format specifier with the stat command to get the size of a file in bytes.
# - The script uses the 2>/dev/null redirection to suppress error messages from the stat command.
# - The script uses the echo command to print the total size in bytes.
# - The script uses the $(...) syntax to capture the output of the dir_size function and store it in the size variable.
# - The script uses the $1 variable to refer to the first argument passed to the dir_size function.
# - The script uses the $dir variable to refer to the input directory.
# - The script uses the $item variable to refer to each item in the directory.
# - The script uses the $size variable to store the total size of files in the directory.






### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
###  ==========================================================================================================================================================

### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================







### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
###  ==========================================================================================================================================================

### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================







### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
###  ==========================================================================================================================================================

### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================





### ==========================================================================================================================================================
### 
### ==========================================================================================================================================================


echo

